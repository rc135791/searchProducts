{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helper_1 = require(\"../../lib/helper\");\n/**\n * Compute and return a Basic Authorization header from a username and password.\n *\n * @param {string} username - The username or client id\n * @param {string} password - The password or client secret\n * @returns {string} - A Basic Auth header with format \"Basic <encoded-credentials>\"\n */\n\n\nfunction computeBasicAuthHeader(username, password) {\n  var encodedCreds = Buffer.from(username + \":\" + password).toString('base64');\n  return \"Basic \" + encodedCreds;\n}\n\nexports.computeBasicAuthHeader = computeBasicAuthHeader; // returns true if the string has a curly bracket or quote as the first or last character\n// these are common user-issues that we should handle before they get a network error\n\nfunction badCharAtAnEnd(value) {\n  return value.startsWith('{') || value.startsWith('\"') || value.endsWith('}') || value.endsWith('\"');\n}\n/**\n * Checks credentials for common user mistakes of copying {, }, or \" characters from the documentation\n *\n * @param {object} obj - The options object holding credentials\n * @param {string[]} credsToCheck - An array containing the keys of the credentials to check for problems\n * @returns {string | null} - Returns a string with the error message if there were problems, null if not\n */\n\n\nfunction checkCredentials(obj, credsToCheck) {\n  var errorMessage = '';\n  credsToCheck.forEach(function (cred) {\n    if (obj[cred] && badCharAtAnEnd(obj[cred])) {\n      errorMessage += \"The \" + cred + \" shouldn't start or end with curly brackets or quotes. Be sure to remove any {, }, or \\\"\";\n    }\n  });\n\n  if (errorMessage.length) {\n    errorMessage += 'Revise these credentials - they should not start or end with curly brackets or quotes.';\n    return new Error(errorMessage);\n  } else {\n    return null;\n  }\n}\n\nexports.checkCredentials = checkCredentials;\n\nfunction validateInput(options, requiredOptions) {\n  // check for required params\n  var missingParamsError = helper_1.getMissingParams(options, requiredOptions);\n\n  if (missingParamsError) {\n    throw missingParamsError;\n  } // check certain credentials for common user errors: username, password, and apikey\n  // note: will only apply to certain authenticators\n\n\n  var credsToCheck = ['username', 'password', 'apikey'];\n  var credentialProblems = checkCredentials(options, credsToCheck);\n\n  if (credentialProblems) {\n    throw credentialProblems;\n  }\n}\n\nexports.validateInput = validateInput;","map":null,"metadata":{},"sourceType":"script"}