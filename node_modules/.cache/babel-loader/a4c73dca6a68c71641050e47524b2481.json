{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* istanbul ignore file */\n\n/**\n * This module provides a set of helper methods used to reduce code duplication in the generated unit tests\n * for the SDKs that depend on this core package. Note that these methods are not used by the tests for this\n * package - they are meant to be exported and made available to dependent libraries.\n *\n * They are included in the `test` directory since they rely on `jest` globals (like `expect`) and this\n * requires special linting rules that should not be configured in the rest of the source code.\n */\n\n/**\n * Takes the request options constructed by the SDK and checks that the `url` and `method` properties\n * were set to their correct values.\n *\n * @param {Object} options - the options object put together by the SDK, retrieved from the createRequest mock\n * @param {String} url - The URL path of the service endpoint, from the paths section of the API definition\n * @param {String} string - The HTTP method for the request, from the API definition\n * @returns {void}\n */\n\nfunction checkUrlAndMethod(options, url, method) {\n  expect(options.url).toEqual(url);\n  expect(options.method).toEqual(method);\n}\n\nexports.checkUrlAndMethod = checkUrlAndMethod;\n;\n/**\n * Takes the mock object for the `createRequest` method, extracts the headers that were sent with the call,\n * and checks for the expected values for `Accept` and `Content-Type`. This to verify that the SDK sets\n * the correct values in the code.\n *\n * @param {Object} createRequestMock - the jest mock object for the `createRequest` method in the `RequestWrapper` class\n * @param {String} accept - the expected value for the `Accept` header\n * @param {String} contentType - the expected value for the `Content-Type` header\n * @returns {void}\n */\n\nfunction checkMediaHeaders(createRequestMock, accept, contentType) {\n  var headers = createRequestMock.mock.calls[0][0].defaultOptions.headers;\n  expect(headers.Accept).toEqual(accept);\n  expect(headers['Content-Type']).toEqual(contentType);\n}\n\nexports.checkMediaHeaders = checkMediaHeaders;\n;\n/**\n * Takes the mock object for the `createRequest` method, extracts the headers that were sent with the call,\n * and checks for the expected value for a user-defined header. This is verify that the SDK accepts header\n * parameters and sends them as headers in the request.\n *\n * @param {Object} createRequestMock - the jest mock object for the `createRequest` method in the `RequestWrapper` class\n * @param {String} userHeaderName - the name of the header passed by the user, e.g. `Contained-Content-Type`\n * @param {String} userHeaderValue - the expected value for the header passed by the user\n * @returns {void}\n */\n\nfunction checkUserHeader(createRequestMock, userHeaderName, userHeaderValue) {\n  var headers = createRequestMock.mock.calls[0][0].defaultOptions.headers;\n  expect(headers[userHeaderName]).toEqual(userHeaderValue);\n}\n\nexports.checkUserHeader = checkUserHeader;\n;\n/**\n * This method simply ensures that the method executed without any issues by extracting\n * the argument from the mock object for the `createRequest` method and verifying that it is an object.\n *\n * @param {Object} createRequestMock - the jest mock object for the `createRequest` method in the `RequestWrapper` class\n * @returns {void}\n */\n\nfunction checkForSuccessfulExecution(createRequestMock) {\n  var sdkParams = createRequestMock.mock.calls[0][0];\n  expect(typeof sdkParams).toEqual('object');\n}\n\nexports.checkForSuccessfulExecution = checkForSuccessfulExecution;\n;\n/**\n * This method extracts the `options` property from the object passed into `createRequest`. This property is\n * an object containing all of the SDK method-specific information (like `path` and `body`) used to build a request.\n * This method is just a convenience method for the unit tests to be able to make assertions on the items in the request.\n *\n * @param {Object} createRequestMock - the jest mock object for the `createRequest` method in the `RequestWrapper` class\n * @returns {Object}\n */\n\nfunction getOptions(createRequestMock) {\n  return createRequestMock.mock.calls[0][0].options;\n}\n\nexports.getOptions = getOptions;\n;\n/**\n * This method simply ensures that the SDK methods return Promises by checking for\n * the `then` function - common way to assess whether or not an object is a Promise.\n *\n * @param {Promise<any>} sdkPromise - the Promise returned by an SDK method\n * @returns {void}\n */\n\nfunction expectToBePromise(sdkPromise) {\n  expect(typeof sdkPromise.then).toBe('function');\n}\n\nexports.expectToBePromise = expectToBePromise;\n;","map":null,"metadata":{},"sourceType":"script"}