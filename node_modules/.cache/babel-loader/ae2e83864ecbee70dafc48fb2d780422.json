{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar authenticators_1 = require(\"../authenticators\");\n\nvar read_external_sources_1 = require(\"./read-external-sources\");\n\nfunction getAuthenticatorFromEnvironment(serviceName) {\n  if (!serviceName) {\n    throw new Error('Service name is required.');\n  } // construct the credentials object from the environment\n\n\n  var credentials = read_external_sources_1.readExternalSources(serviceName);\n\n  if (credentials === null) {\n    throw new Error('Unable to create an authenticator from the environment.');\n  } // remove client-level properties\n\n\n  delete credentials.url;\n  delete credentials.disableSsl; // convert \"auth\" properties to their proper keys\n\n  if (credentials.authUrl) {\n    credentials.url = credentials.authUrl;\n    delete credentials.authUrl;\n  }\n\n  if (credentials.authDisableSsl) {\n    credentials.disableSslVerification = credentials.authDisableSsl;\n    delete credentials.authDisableSsl;\n  } // default the auth type to `iam` if authType is undefined, or not a string\n\n\n  var authType = credentials.authType;\n\n  if (!authType || typeof authType !== 'string') {\n    authType = 'iam';\n  } // create and return the appropriate authenticator\n\n\n  var authenticator; // fold authType to lower case for case insensitivity\n\n  switch (authType.toLowerCase()) {\n    case 'noauth':\n      authenticator = new authenticators_1.NoAuthAuthenticator();\n      break;\n\n    case 'basic':\n      authenticator = new authenticators_1.BasicAuthenticator(credentials);\n      break;\n\n    case 'bearertoken':\n      authenticator = new authenticators_1.BearerTokenAuthenticator(credentials);\n      break;\n\n    case 'cp4d':\n      authenticator = new authenticators_1.CloudPakForDataAuthenticator(credentials);\n      break;\n\n    case 'iam':\n      authenticator = new authenticators_1.IamAuthenticator(credentials);\n      break;\n\n    default:\n      throw new Error('Invalid value for AUTH_TYPE: ' + authType);\n  }\n\n  return authenticator;\n}\n\nexports.getAuthenticatorFromEnvironment = getAuthenticatorFromEnvironment;","map":null,"metadata":{},"sourceType":"script"}