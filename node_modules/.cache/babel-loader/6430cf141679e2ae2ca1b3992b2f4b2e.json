{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extend = require(\"extend\");\n\nvar logger_1 = require(\"../../lib/logger\");\n\nvar utils_1 = require(\"../utils\");\n\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\n/**\n * Check for only one of two elements being defined.\n * Returns true if a is defined and b is undefined,\n * or vice versa. Returns false if both are defined\n * or both are undefined.\n *\n * @param {any} a - The first object\n * @param {any} b - The second object\n * @returns {boolean}\n */\n\n\nfunction onlyOne(a, b) {\n  return Boolean(a && !b || b && !a);\n}\n\nvar CLIENT_ID_SECRET_WARNING = 'Warning: Client ID and Secret must BOTH be given, or the header will not be included.';\n\nvar IamTokenManager =\n/** @class */\nfunction (_super) {\n  __extends(IamTokenManager, _super);\n  /**\n   * IAM Token Manager Service\n   *\n   * Retreives and stores IAM access tokens.\n   *\n   * @param {Object} options\n   * @param {String} options.apikey\n   * @param {String} options.iamAccessToken\n   * @param {String} options.iamUrl - url of the iam api to retrieve tokens from\n   * @constructor\n   */\n\n\n  function IamTokenManager(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.requiredOptions = ['apikey'];\n    utils_1.validateInput(options, _this.requiredOptions);\n    _this.apikey = options.apikey;\n    _this.url = _this.url || 'https://iam.cloud.ibm.com/identity/token';\n\n    if (options.clientId) {\n      _this.clientId = options.clientId;\n    }\n\n    if (options.clientSecret) {\n      _this.clientSecret = options.clientSecret;\n    }\n\n    if (onlyOne(options.clientId, options.clientSecret)) {\n      // tslint:disable-next-line\n      logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n    }\n\n    return _this;\n  }\n  /**\n   * Set the IAM 'client_id' and 'client_secret' values.\n   * These values are used to compute the Authorization header used\n   * when retrieving the IAM access token.\n   * If these values are not set, no Authorization header will be\n   * set on the request (it is not required).\n   *\n   * @param {string} clientId - The client id\n   * @param {string} clientSecret - The client secret\n   * @returns {void}\n   */\n\n\n  IamTokenManager.prototype.setClientIdAndSecret = function (clientId, clientSecret) {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n\n    if (onlyOne(clientId, clientSecret)) {\n      // tslint:disable-next-line\n      logger_1.default.warn(CLIENT_ID_SECRET_WARNING);\n    }\n  };\n  /**\n   * Request an IAM token using an API key.\n   *\n   * @returns {Promise}\n   */\n\n\n  IamTokenManager.prototype.requestToken = function () {\n    // these cannot be overwritten\n    var requiredHeaders = {\n      'Content-type': 'application/x-www-form-urlencoded'\n    }; // If both the clientId and secret were specified by the user, then use them.\n\n    if (this.clientId && this.clientSecret) {\n      requiredHeaders.Authorization = utils_1.computeBasicAuthHeader(this.clientId, this.clientSecret);\n    }\n\n    var parameters = {\n      options: {\n        url: this.url,\n        method: 'POST',\n        headers: extend(true, {}, this.headers, requiredHeaders),\n        form: {\n          grant_type: 'urn:ibm:params:oauth:grant-type:apikey',\n          apikey: this.apikey,\n          response_type: 'cloud_iam'\n        },\n        rejectUnauthorized: !this.disableSslVerification\n      }\n    };\n    return this.requestWrapperInstance.sendRequest(parameters);\n  };\n\n  return IamTokenManager;\n}(jwt_token_manager_1.JwtTokenManager);\n\nexports.IamTokenManager = IamTokenManager;","map":null,"metadata":{},"sourceType":"script"}