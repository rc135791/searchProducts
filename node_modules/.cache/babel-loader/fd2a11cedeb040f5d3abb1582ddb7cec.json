{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar camelcase = require(\"camelcase\");\n\nvar isEmpty = require(\"lodash.isempty\");\n\nvar vcapServices = require(\"vcap_services\");\n\nvar read_credentials_file_1 = require(\"./read-credentials-file\");\n/*\n * Read properties stored in external sources like Environment Variables,\n * the credentials file, VCAP services, etc. and return them as an\n * object. The keys of this object will have the service name prefix removed\n * and will be converted to lower camel case.\n *\n * Only one source will be used at a time.\n */\n\n\nfunction readExternalSources(serviceName) {\n  if (!serviceName) {\n    throw new Error('Service name is required.');\n  }\n\n  return getProperties(serviceName);\n}\n\nexports.readExternalSources = readExternalSources;\n\nfunction getProperties(serviceName) {\n  // Try to get properties from external sources, with the following priority:\n  // 1. Credentials file (ibm-credentials.env)\n  // 2. Environment variables\n  // 3. VCAP Services (Cloud Foundry)\n  // only get properties from one source, return null if none found\n  var properties = null;\n  properties = filterPropertiesByServiceName(read_credentials_file_1.readCredentialsFile(), serviceName);\n\n  if (isEmpty(properties)) {\n    properties = filterPropertiesByServiceName(process.env, serviceName);\n  }\n\n  if (isEmpty(properties)) {\n    properties = getCredentialsFromCloud(serviceName);\n  }\n\n  return properties;\n}\n/**\n * Pulls credentials from env properties\n *\n * Property checked is uppercase service.name suffixed by _USERNAME and _PASSWORD\n *\n * For example, if service.name is speech_to_text,\n * env properties are SPEECH_TO_TEXT_USERNAME and SPEECH_TO_TEXT_PASSWORD\n *\n * @param {Object} envObj - the object containing the credentials keyed by environment variables\n * @returns {Credentials}\n */\n\n\nfunction filterPropertiesByServiceName(envObj, serviceName) {\n  var credentials = {};\n  var name = serviceName.toUpperCase().replace(/-/g, '_') + '_'; // append the underscore that must follow the service name\n  // filter out properties that don't begin with the service name\n\n  Object.keys(envObj).forEach(function (key) {\n    if (key.startsWith(name)) {\n      var propName = camelcase(key.substring(name.length)); // remove the name from the front of the string and make camelcase\n\n      credentials[propName] = envObj[key];\n    }\n  }); // all env variables are parsed as strings, convert disable ssl vars to boolean\n\n  if (typeof credentials.disableSsl === 'string') {\n    credentials.disableSsl = credentials.disableSsl === 'true';\n  }\n\n  if (typeof credentials.authDisableSsl === 'string') {\n    credentials.authDisableSsl = credentials.authDisableSsl === 'true';\n  }\n\n  return credentials;\n}\n/**\n * Pulls credentials from VCAP_SERVICES env property that IBM Cloud sets\n *\n */\n\n\nfunction getCredentialsFromCloud(serviceName) {\n  var credentials = vcapServices.getCredentials(serviceName); // infer authentication type from credentials in a simple manner\n  // iam is used as the default later\n\n  if (credentials.username || credentials.password) {\n    credentials.authType = 'basic';\n  }\n\n  return credentials;\n}","map":null,"metadata":{},"sourceType":"script"}