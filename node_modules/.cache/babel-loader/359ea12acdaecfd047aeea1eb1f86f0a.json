{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2019 IBM Corp. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extend = require(\"extend\");\n\nvar utils_1 = require(\"../utils\");\n\nvar jwt_token_manager_1 = require(\"./jwt-token-manager\");\n\nvar Cp4dTokenManager =\n/** @class */\nfunction (_super) {\n  __extends(Cp4dTokenManager, _super);\n  /**\n   * ICP Token Manager Service\n   *\n   * Retreives and stores ICP access tokens.\n   *\n   * @param {Object} options\n   * @param {String} options.username\n   * @param {String} options.password\n   * @param {String} options.accessToken - user-managed access token\n   * @param {String} options.url - URL for the CP4D cluster\n   * @param {Boolean} options.disableSslVerification - disable SSL verification for token request\n   * @constructor\n   */\n\n\n  function Cp4dTokenManager(options) {\n    var _this = _super.call(this, options) || this;\n\n    _this.requiredOptions = ['username', 'password', 'url'];\n    _this.tokenName = 'accessToken';\n    utils_1.validateInput(options, _this.requiredOptions);\n    var tokenApiPath = '/v1/preauth/validateAuth'; // do not append the path if user already has\n\n    if (_this.url && !_this.url.endsWith(tokenApiPath)) {\n      _this.url = _this.url + tokenApiPath;\n    }\n\n    _this.username = options.username;\n    _this.password = options.password;\n    return _this;\n  }\n  /**\n   * Request an CP4D token using a basic auth header.\n   *\n   * @returns {Promise}\n   */\n\n\n  Cp4dTokenManager.prototype.requestToken = function () {\n    // these cannot be overwritten\n    var requiredHeaders = {\n      Authorization: utils_1.computeBasicAuthHeader(this.username, this.password)\n    };\n    var parameters = {\n      options: {\n        url: this.url,\n        method: 'GET',\n        headers: extend(true, {}, this.headers, requiredHeaders),\n        rejectUnauthorized: !this.disableSslVerification\n      }\n    };\n    return this.requestWrapperInstance.sendRequest(parameters);\n  };\n\n  return Cp4dTokenManager;\n}(jwt_token_manager_1.JwtTokenManager);\n\nexports.Cp4dTokenManager = Cp4dTokenManager;","map":null,"metadata":{},"sourceType":"script"}