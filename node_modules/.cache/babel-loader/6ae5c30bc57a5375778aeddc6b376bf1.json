{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar path_1 = require(\"path\"); // This module attempts to identify common content-types based on the filename or header\n// It is not exhaustive, and for best results, you should always manually specify the content-type option.\n// See the complete list of supported content-types at\n// https://cloud.ibm.com/docs/services/speech-to-text?topic=speech-to-text-input#formats\n// *some* file types can be identified by the first 3-4 bytes of the file\n\n\nvar headerContentTypes = {\n  fLaC: 'audio/flac',\n  RIFF: 'audio/wav',\n  OggS: 'audio/ogg',\n  ID3: 'audio/mp3',\n  \"\\x1AE\\u07E3\": 'audio/webm' // String for first four hex's of webm: [1A][45][DF][A3] (https://www.matroska.org/technical/specs/index.html#EBML)\n\n};\nvar filenameContentTypes = {\n  '.mp3': 'audio/mp3',\n  '.wav': 'audio/wav',\n  '.flac': 'audio/flac',\n  '.ogg': 'audio/ogg',\n  '.oga': 'audio/ogg',\n  '.opus': 'audio/ogg; codec=opus',\n  '.webm': 'audio/webm'\n};\n/**\n * Takes the beginning of an audio file and returns the associated content-type / mime type\n *\n * @param {Buffer} buffer with at least the first 4 bytes of the file\n * @return {String|undefined} - the contentType of undefined\n */\n\nvar fromHeader = function fromHeader(buffer) {\n  var headerStr = buffer.slice(0, 4).toString().substr(0, 4); // mp3's are only consistent for the first 3 characters\n\n  return headerContentTypes[headerStr] || headerContentTypes[headerStr.substr(0, 3)];\n};\n/**\n * Guess the content type from the filename\n *\n * Note: Blob and File objects include a .type property, but we're ignoring it because it's frequently either\n * incorrect (e.g. video/ogg instead of audio/ogg) or else a different format than what's expected (e.g. audio/x-wav)\n *\n * @param {String|ReadableStream|FileObject|Buffer|File} file - string filename or url, or binary File/Blob object\n * @return {String|undefined}\n */\n\n\nvar fromFilename = function fromFilename(file) {\n  var ext = path_1.extname(typeof file === 'string' && file || file['name'] || '');\n  return filenameContentTypes[ext];\n};\n\nexports.default = {\n  fromFilename: fromFilename,\n  fromHeader: fromHeader\n};","map":null,"metadata":{},"sourceType":"script"}